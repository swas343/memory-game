{"version":3,"sources":["resources/helper.js","components/Card.js","hooks/useExitPrompt.js","App.js","reportWebVitals.js","index.js"],"names":["letters","Card","props","useState","flipCard","setFlipCard","roateY","cardStatus","id","overlay","hidden","className","onClick","setTimeout","getClickHandler","item","initBeforeUnLoad","showExitPrompt","window","onbeforeunload","event","e","preventDefault","returnValue","App","bool","setShowExitPrompt","onload","useEffect","useExitPrompt","updateCard","setUpdateCard","matches","setMatches","turns","setTurns","clicks","setClicks","disabled","setDisabled","array","randomIndex","currentIndex","length","Math","floor","random","shuffle","concat","cards","state","card2Id","card2Item","getResult","alert","map","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.14bb1cb7.chunk.js","sourcesContent":["const letters = [\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\"];\n\nfunction shuffle(array) {\n    var currentIndex = array.length,  randomIndex;\n  \n    // While there remain elements to shuffle...\n    while (currentIndex !== 0) {\n  \n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n  \n      // And swap it with the current element.\n      [array[currentIndex], array[randomIndex]] = [\n        array[randomIndex], array[currentIndex]];\n    }\n  \n    return array;\n}\n\nfunction getResult(cards){\n    if(cards[0] === cards[1]){\n        return true;\n    }\n    return false;\n}\n\nexport {\n    letters,\n    shuffle,\n    getResult\n}","import { useState } from \"react\";\nconst Card = (props) =>{\n    const [flipCard, setFlipCard] = useState('');\n    const roateY = (flipCard === 'openFlip') ? 'roateY' : '';\n\n    const cardStatus = props.cardStatus[props.id] || 'closed'\n    const overlay = (cardStatus) === 'open' ? 'hidden': '';\n    const hidden = (cardStatus === 'removed') ? 'hidden' : '';\n    \n    const clickHandler = () =>{\n        setFlipCard('openFlip')\n        \n        setTimeout( () => {\n            props.getClickHandler(props.id,props.item);\n            setFlipCard('')\n        },500)\n    }\n\n    return (\n        <div key={props.id} className={`node ${cardStatus} ${flipCard} ${hidden}`} onClick={clickHandler}>\n            <div className={`overlay ${overlay}`}></div>\n            <span className={roateY}> {props.item} </span>\n        </div>\n    )\n}\n\nexport default Card;","import { useState, useEffect } from 'react';\n\nconst initBeforeUnLoad = (showExitPrompt) => {\n  window.onbeforeunload = (event) => {\n    if (!showExitPrompt) {\n      const e = event || window.event;\n      e.preventDefault();\n      if (e) {\n        e.returnValue = '';\n      }\n      return '';\n    }\n  };\n};\n\n// Hook\nexport default function useExitPrompt(bool) {\n  const [showExitPrompt, setShowExitPrompt] = useState(bool);\n\n  window.onload = function() {\n    initBeforeUnLoad(showExitPrompt);\n  };\n\n  useEffect(() => {\n    initBeforeUnLoad(showExitPrompt);\n  }, [showExitPrompt]);\n\n  return [showExitPrompt, setShowExitPrompt];\n}\n","import './App.css';\nimport {letters, shuffle, getResult} from './resources/helper';\nimport Card from './components/Card';\nimport { useState, useEffect } from 'react';\nimport useExitPrompt from './hooks/useExitPrompt';\n\n\nfunction App() {\n  // using hook to prevent use navigating away accidently\n  useExitPrompt(false);\n  \n  const [updateCard, setUpdateCard] = useState({});  \n  const [matches, setMatches] = useState(0);\n  const [turns, setTurns] = useState(0);\n  const [clicks, setClicks] = useState([])\n  const [disabled, setDisabled] = useState('');\n  const [cards] = useState(() => shuffle(letters.concat(letters)));\n\n\n  const reset = () =>{\n    setUpdateCard({})\n    setMatches(0)\n    setTurns(0);\n  }\n  \n  const checkGameStatus = () =>{\n    if(matches > 7){\n        alert(`Game ended! Your score was ${turns}, window will reset automatically`)\n        reset()\n    }\n  }\n\n  const gameResults = (card2Id,card2Item) =>{\n    const result = getResult([clicks[1],card2Item])\n    if(result){\n      // increase match and check game status\n      setMatches( state => matches + 1 );\n      setUpdateCard( (state) => {\n        return {...updateCard, [card2Id]:'removed', [clicks[0]] : 'removed'}\n      })\n    }else{\n      // close both the cards\n      setUpdateCard( (state) => {\n        return {...updateCard, [clicks[0]]:'closed', [card2Id]:'closed'}\n      })\n    }\n    setClicks(state => []);\n    setDisabled('')\n  }\n\n  const getClickHandler = (id,item) =>{\n    // opening the card\n    setUpdateCard( (state) => {\n      return {...updateCard, [id]:'open'}\n    })\n\n    if(clicks.length === 0){\n      // setting the first card in state for evaluation\n      setClicks( state => [ [id], item ]);\n    }else{\n      // this will be the second card open, check results and game status\n      // turn will increase on every second card open no matter what\n      setDisabled('disabled')\n      setTurns( state => turns + 1);\n      \n      setTimeout( () => {\n        gameResults(id,item)\n      }, 500);\n      \n    }\n  }\n\n  useEffect(checkGameStatus,[matches])\n\n  return (\n    <div className={`App ${disabled}`}>\n      <div className=\"container\">\n        <div className=\"statusBar\">\n          <strong className=\"pull-left\">Matches: {matches}</strong>\n          <strong className=\"pull-right\">Turns: {turns}</strong>\n        </div>\n        {\n          cards.map( (item,index) =>{\n            return <Card \n              key={`0${index}`} \n              id={`0${index}`} \n              item={item} \n              getClickHandler={getClickHandler}  \n              cardStatus={updateCard}\n            />\n          })\n        }\n      </div>\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}